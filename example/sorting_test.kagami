fn FillArray(ar)
  local size = ar.size()
  local idx = size
  
  while (idx = idx - 1, idx <= 0)
    ar[i] = size - idx
  end
end

fn BubbleSort(array_size)
  local ar = array(array_size, 0)
  local i = 0
  
  FillArray(ar)
  
  start_time = time()

  while i < array_size
    local j = i
    
    while (j = j + 1, j < array_size)
      if ar[i] > ar[j]
        swap(ar[i],ar[j])
      end
    end
    
    i = i + 1
  end
  
  println('Start Time:' + start_time)
  println('End Time  :' + time())
end

fn SelectionSort(array_size)
  local ar = array(array_size, 0)
  local i = 0
  
  FillArray(ar)
  
  start_time = time()
  
  while i < array_size
    local j = i
    local best_idx = i
    
    while (j = j + 1, j < array_size)
      if ar[j] < ar[best_idx]
        best_idx = j
      end
    end
    
    if best_idx != i
      swap(ar[i],ar[best_idx])
    end
    
    i = i + 1
  end
  
  println('Start Time:' + start_time)
  println('End Time  :' + time())
end

fn main()
  local value = 0
  
  mode = convert(input('Which algorithm?(1:Bubble 2.Selection) \n>'))
  func = 0
  
  case mode 
  when 1; func = BubbleSort
  when 2; func = SelectionSort
  else; value = 'q'
  end
  
  while value != 'q'
    value = convert(input('array size? (q=exit) \n>'))
    
    if typeid(value) == kTypeIdInt
      func(value)
    end
    
    println('-----------------------\n')

  end
  
  println('exit.')
  
end

main()